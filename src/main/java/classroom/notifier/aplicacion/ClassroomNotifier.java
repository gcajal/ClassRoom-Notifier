/*
 * This source file was generated by the Gradle 'init' task
 */
package classroom.notifier.aplicacion;

import classroom.notifier.interfaces.Observable;
import classroom.notifier.interfaces.Observer;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class ClassroomNotifier implements Observable {
	private Map<String, Observer> _observers;
	private Map<String, Observer> observerActual;
	private boolean changed;

	public ClassroomNotifier(){
		this._observers = new HashMap<>();
		this.observerActual = new HashMap<>();
	}

	@Override
	public void addObserver(Observer o) {
		if (o == null)
			throw new NullPointerException();
		this._observers.put(o.getClass().getSimpleName(),o);
	}


	public void addCurrentObservers(String name) {
		observerActual.put(name, _observers.get(name));
	}

	public Set<String> getAllObserversNames() {
		return _observers.keySet();
	}


	public Set<Observer> getCurrentObservers() {
		return observerActual.values().stream().collect(Collectors.toSet());
	}

	public void deleteCurrentObserver(String name){

		observerActual.remove(name);
	}


	public void refreshObservers(String name) {
		Iterator<Map.Entry<String, Observer>> iterator = observerActual.entrySet().iterator();

		while (iterator.hasNext()) {
			Map.Entry<String, Observer> entry = iterator.next();

			// Si la clave no es la que queremos conservar, la eliminamos
			if (!entry.getKey().equals(name)) {
				iterator.remove();
			}
		}
	}


	public void notifyObservers(Object arg) {
		getCurrentObservers().forEach(observer -> observer.update(arg));
	}
}
